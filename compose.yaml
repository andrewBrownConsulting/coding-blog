# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  web:
    build: .
    command: npm start
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_IMAGE_API: http://localhost:9002/images
    ports:
      - 3000:3000
    develop:
      watch:
        - action: sync
          path: .
          target: .
          ignore: node_modules
        - action: rebuild
          path: package.json
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: '1234'
      POSTGRES_DB: blog_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - 5432:5432
  backend:
    build: ./backend
    environment:
      NODE_ENV: production
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 9000:9000
      - 9001:9001
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
  images-api:
    build: ./images-api
    ports:
      - 9002:9002
    environment:
      NODE_ENV: production
volumes:
  pgdata: